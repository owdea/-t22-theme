/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./assets/src/main.js":
/*!****************************!*\
  !*** ./assets/src/main.js ***!
  \****************************/
/***/ (() => {

document.addEventListener('DOMContentLoaded', function () {
  // Event listener for toggling visibility of the secondary menu (top part of the header).
  var menuButton = document.querySelector('.secondary-menu-btn');
  var secondaryMenu = document.querySelector('.secondary-menu');
  var secondaryMenuContainer = document.querySelector('.secondary-menu-container');
  if (menuButton && secondaryMenu) {
    menuButton.addEventListener('click', function () {
      if (secondaryMenu.classList.contains('secondary-menu-active')) {
        secondaryMenu.classList.remove('secondary-menu-active');

        // After animation it over it sets display:none
        secondaryMenu.addEventListener('transitionend', function hideMenu() {
          if (!secondaryMenu.classList.contains('secondary-menu-active')) {
            secondaryMenu.style.display = 'none';
          }
          secondaryMenu.removeEventListener('transitionend', hideMenu);
          secondaryMenuContainer.style.display = 'none';
        });
      } else {
        //Sets display block and runs transition after click
        secondaryMenuContainer.style.display = 'block';
        secondaryMenu.style.display = 'block';
        secondaryMenu.offsetHeight; // Necessary to force a reflow before the animation (so the browser registers the `display` change)
        secondaryMenu.classList.add('secondary-menu-active');
      }
      secondaryMenuContainer.classList.toggle('secondary-container-active');
      menuButton.classList.toggle('bg-shadow-light-active');
    });
    document.addEventListener('click', function (event) {
      if (!secondaryMenu.contains(event.target) && !menuButton.contains(event.target)) {
        if (secondaryMenu.classList.contains('secondary-menu-active')) {
          secondaryMenu.classList.remove('secondary-menu-active');

          // Setting display: none after transition is over
          secondaryMenu.addEventListener('transitionend', function hideMenu() {
            if (!secondaryMenu.classList.contains('secondary-menu-active')) {
              secondaryMenu.style.display = 'none';
            }
            secondaryMenu.removeEventListener('transitionend', hideMenu);
            secondaryMenuContainer.style.display = 'none';
          });
          if (secondaryMenuContainer.classList.contains('secondary-container-active')) secondaryMenuContainer.classList.remove('secondary-container-active');
          menuButton.classList.remove('bg-shadow-light-active');
        }
      }
    });
  }
});

// Counting top position for secondary menu
document.addEventListener('DOMContentLoaded', function () {
  var adminBar = document.getElementById('wpadminbar');
  var headerTop = document.querySelector('.header-top');
  var adminBarHeight = adminBar ? adminBar.offsetHeight : 0;
  var headerTopHeight = headerTop ? headerTop.offsetHeight : 0;
  var totalHeight = adminBarHeight + headerTopHeight;
  document.querySelector('.secondary-menu-container').style.top = totalHeight + 'px';
  var resizeObserver = new ResizeObserver(function () {
    var adminBarHeight = adminBar ? adminBar.offsetHeight : 0;
    var headerTopHeight = headerTop ? headerTop.offsetHeight : 0;
    var totalHeight = adminBarHeight + headerTopHeight;
    document.querySelector('.secondary-menu-container').style.top = totalHeight + 'px';
  });
  if (adminBar) {
    resizeObserver.observe(adminBar);
  }
  if (headerTop) {
    resizeObserver.observe(headerTop);
  }
});
document.addEventListener('DOMContentLoaded', function () {
  // Event listener for toggling visibility of the mobile primary menu.
  // TODO: Hiding menu when changing res from mobile to wider.
  var primaryMenuMobileButton = document.querySelector('.primary-menu-mobile-icon');
  var primaryMenuMobile = document.querySelector('.primary-menu-mobile');
  if (primaryMenuMobileButton && primaryMenuMobile) {
    primaryMenuMobileButton.addEventListener('click', function () {
      primaryMenuMobile.classList.toggle('primary-menu-mobile-active');
    });
  }
});
document.addEventListener('DOMContentLoaded', function () {
  // Event listener for toggling visibility of elements in case of opening mobile search menu.
  var searchButton = document.querySelector('#mobile-search-bar-button');
  var searchLabel = document.querySelector('.header-top-right');
  var secondaryMenuButton = document.querySelector('.secondary-menu-btn');
  var headerLogo = document.querySelector('#header-logo');
  var magnifierIcon = document.querySelector('#mobile-search-magnifier');
  var exitIcon = document.querySelector('#mobile-search-exit');
  if (searchButton && searchLabel && secondaryMenuButton && headerLogo) {
    searchButton.addEventListener('click', function () {
      searchLabel.classList.toggle('header-top-right-mobile');
      secondaryMenuButton.classList.toggle('invisibleHidden');
      headerLogo.classList.toggle('invisibleHidden');
      magnifierIcon.classList.toggle('invisibleHidden');
      exitIcon.classList.toggle('visibleBlock');
      searchButton.classList.toggle('bg-shadow-light-active');
    });
  }
});
document.addEventListener('DOMContentLoaded', function () {
  // Toggling "Další..." menu visibility on button click
  var moreButton = document.querySelector('.primary-more-btn');
  var primaryMoreMenu = document.querySelector('.primary-more');
  if (moreButton && primaryMoreMenu) {
    moreButton.addEventListener('click', function () {
      primaryMoreMenu.classList.toggle('visibleVisible');
      moreButton.classList.toggle('primary-button-active');
    });
  }
  document.addEventListener('click', function (event) {
    // Check if the clicked element is not inside the primary-more menu or the moreButton
    if (!primaryMoreMenu.contains(event.target) && !moreButton.contains(event.target)) {
      primaryMoreMenu.classList.remove('visibleVisible');
      moreButton.classList.remove('primary-button-active');
    }
  });
});
document.addEventListener('DOMContentLoaded', function () {
  // Handling changes in menu layout (visible menu and hidden elements in "Další..." menu
  document.fonts.ready.then(function () {
    // primaryMenu - whole bottom menu element (ul of navigators, chosen navigator (not required), live stream button (not required) and Další... button)
    // primaryMenuWidthCounted -
    // navigatorElement - chosen navigator | navigatorWidth - its width
    // liveStreamElement - live stream button | liveStreamWidth - its width
    // buttonPrimaryWidth - width of the "Další..." button
    // primaryElements - navigators NodeList from primary menu | primaryArray - JS array containing navigators from primary menu
    // primaryMoreArray - UL containing navigators which would not fit in #primary-menu
    var primaryMenu = document.querySelector("#primary-menu");
    if (primaryMenu) {
      var navigatorElement = document.getElementById('primary-navigator');
      var liveStreamElement = document.getElementById('primary-live');
      var navigatorWidth = 0;
      var liveStreamWidth = 0;
      if (navigatorElement) navigatorWidth = navigatorElement.offsetWidth;
      if (liveStreamElement) liveStreamWidth = liveStreamElement.offsetWidth;
      var buttonPrimaryWidth = document.getElementById('primary-button').offsetWidth;
      var primaryMenuWidthCounted = primaryMenu.offsetWidth;
      var primaryElements = document.querySelectorAll('#primary-menu nav ul li');
      var primaryArray = Array.from(primaryElements);
      var primaryMoreArray = document.getElementById('primary-more');
      var widthSum = 0;
      var primaryMenuWidthSum = 0;
      primaryArray.forEach(function (element) {
        primaryMenuWidthSum += element.offsetWidth;
      });
      if (navigatorWidth + liveStreamWidth + primaryMenuWidthSum <= primaryMenuWidthCounted) {} else {
        document.getElementById("primary-button").style.display = "flex";
        for (var i = 0; i < primaryArray.length; i++) {
          if (navigatorWidth + liveStreamWidth + buttonPrimaryWidth + widthSum + primaryArray[i].offsetWidth > primaryMenuWidthCounted) {
            primaryMoreArray.append(primaryArray[i]);
            for (var j = i + 1; j < primaryArray.length; j++) {
              primaryMoreArray.append(primaryArray[j]);
            }
            break;
          } else {
            widthSum += primaryArray[i].offsetWidth;
          }
        }
      }
      var resize_ob = new ResizeObserver(function (entries) {
        var rect = entries[0].contentRect;
        var width = rect.width;
        primaryArray = Array.from(document.querySelectorAll('#primary-menu nav ul li'));
        widthSum = 0;
        primaryArray.forEach(function (item) {
          widthSum += item.offsetWidth;
        });

        // Refreshing lists of ULs and widths
        // primaryMoreElements - LI NodeList containing current #primary-menu content
        // primaryMoreLiArray - Array of the LI elements from #primary-menu
        // primaryHTMLElement - HTMLElement containing #primary-menu for appending navigators in it
        var primaryMoreElements = document.querySelectorAll('#primary-more li');
        var primaryMoreLiArray = Array.from(primaryMoreElements);
        var primaryHTMLElement = document.getElementById('primary-menu-ul');
        var navigatorElement = document.getElementById('primary-navigator');
        var liveStreamElement = document.getElementById('primary-live');
        if (navigatorElement) navigatorWidth = navigatorElement.offsetWidth;
        if (liveStreamElement) liveStreamWidth = liveStreamElement.offsetWidth;
        var buttonPrimaryWidth = document.getElementById('primary-button').offsetWidth;

        // Creating invisible element for watching width of the first element from hidden UL (copy of first LI with different styling).
        // Deleting element which was created last time.
        var elementToDelete = document.querySelector('.primary-menu-more-first-item-duplicate');
        if (elementToDelete) {
          elementToDelete.remove();
        }
        var originalElement = primaryMoreLiArray[0];
        var primaryButton = document.getElementById('primary-button');
        if (primaryMoreLiArray[0]) {
          var duplicateElement = originalElement.cloneNode(true);
          duplicateElement.className = '';
          duplicateElement.classList.add('primary-menu-more-first-item-duplicate');
          document.body.appendChild(duplicateElement);
          var currentMenuItemInMoreMenu = document.querySelector('#primary-more .current-menu-item');
          // If there is an item with class 'current-menu-item', add the class to the button
          if (currentMenuItemInMoreMenu) {
            primaryButton.classList.add('current-menu-item');
          } else {
            primaryButton.classList.remove('current-menu-item');
          }
          primaryButton.style.display = "flex";
        } else {
          primaryButton.style.display = "none";
        }
        var bothMenuWidthSum = 0;
        primaryArray.forEach(function (element) {
          bothMenuWidthSum += element.offsetWidth;
        });
        primaryMoreLiArray.forEach(function (element) {
          bothMenuWidthSum += element.offsetWidth;
        });

        //
        if (navigatorWidth + liveStreamWidth + widthSum + buttonPrimaryWidth > width) {
          primaryMoreArray.prepend(primaryArray[primaryArray.length - 1]);
          primaryButton.style.display = "flex";
          primaryMoreLiArray = Array.from(document.querySelectorAll('#primary-more li'));
          if (primaryMoreLiArray[0].classList.contains('current-menu-item')) primaryButton.classList.add('current-menu-item');
          //(bothMenuWidthSum + navigatorWidth + liveStreamWidth && primaryMoreLiArray[0]) ||
        } else if (primaryMoreLiArray[0] && navigatorWidth + liveStreamWidth + widthSum + (primaryMoreLiArray.length === 1 ? 0 : buttonPrimaryWidth) + document.querySelector('.primary-menu-more-first-item-duplicate').offsetWidth <= width) {
          if (primaryMoreLiArray.length === 1) primaryButton.style.display = "none";
          if (primaryMoreLiArray[0].classList.contains('current-menu-item')) primaryButton.classList.remove('current-menu-item');
          primaryHTMLElement.append(primaryMoreLiArray[0]);
        }
      });
      resize_ob.observe(primaryMenu);
    } else {
      console.error("Element s ID #primary-menu nebyl nalezen.");
    }
  });
});
document.addEventListener('DOMContentLoaded', function () {
  //Handling hovers on socials LI for showing active imgs
  document.querySelectorAll('.footer-socials li').forEach(function (item) {
    item.addEventListener('mouseover', function () {
      var iconHover = item.querySelector('#socials-icon-hover');
      var icon = item.querySelector('#socials-icon');
      if (iconHover && icon) {
        iconHover.style.display = 'block';
        icon.style.display = 'none';
      }
    });
    item.addEventListener('mouseout', function () {
      var iconHover = item.querySelector('#socials-icon-hover');
      var icon = item.querySelector('#socials-icon');
      if (iconHover && icon) {
        iconHover.style.display = 'none';
        icon.style.display = 'block';
      }
    });
  });
});

/***/ }),

/***/ "./assets/src/main.css":
/*!*****************************!*\
  !*** ./assets/src/main.css ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/dist/main.min": 0,
/******/ 			"dist/main.min": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkct22_theme"] = self["webpackChunkct22_theme"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["dist/main.min"], () => (__webpack_require__("./assets/src/main.js")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["dist/main.min"], () => (__webpack_require__("./assets/src/main.css")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;